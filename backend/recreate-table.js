const sqlite3 = require('sqlite3');
const { open } = require('sqlite');
const path = require('path');

async function recreateTable() {
  const db = await open({
    filename: path.resolve(__dirname, 'data.db'),
    driver: sqlite3.Database
  });

  console.log('üîß –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É daily_reports...\n');

  try {
    // –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
    const backup = await db.all('SELECT * FROM daily_reports');
    console.log(`üì¶ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ ${backup.length} –∑–∞–ø–∏—Å–µ–π`);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
    await db.run('DROP TABLE daily_reports');
    console.log('üóëÔ∏è –£–¥–∞–ª–∏–ª–∏ —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É');

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –ë–ï–ó –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è UNIQUE –Ω–∞ report_date
    await db.run(`
      CREATE TABLE daily_reports (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        report_date TEXT NOT NULL,
        orders_count INTEGER NOT NULL DEFAULT 0,
        total_revenue REAL NOT NULL DEFAULT 0,
        created_at TEXT DEFAULT (datetime('now')),
        updated_at TEXT,
        user_id INTEGER,
        FOREIGN KEY(user_id) REFERENCES users(id)
      )
    `);
    console.log('‚úÖ –°–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for (const record of backup) {
      await db.run(
        'INSERT INTO daily_reports (id, report_date, orders_count, total_revenue, created_at, updated_at, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)',
        record.id, record.report_date, record.orders_count, record.total_revenue, record.created_at, record.updated_at, record.user_id
      );
    }
    console.log(`üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ ${backup.length} –∑–∞–ø–∏—Å–µ–π`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const tableInfo = await db.all("PRAGMA table_info(daily_reports)");
    console.log('\nüìã –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
    tableInfo.forEach(col => {
      console.log(`  ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.pk ? 'PRIMARY KEY' : ''}`);
    });

  } catch (e) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', e.message);
  }

  await db.close();
  console.log('\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!');
}

recreateTable().catch(console.error);
